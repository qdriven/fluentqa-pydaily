# Values here will override previously loaded from all the other settings.

# you can set new variables using DYNACONF_ prefix
# type inference works here, this is going to be and int
DYNACONF_A_NUMBER=42

# Do you need a float?
DYNACONF_A_FRACTION=22.1

# or maybe a boolean?
DYNACONF_THING_ENABLED=false   # also works for true

# I really to force a "66" string
DYNACONF_A_STRING="'66'"
# or
DYNACONF_A_STRING="@str 66"

# Maybe you want to export a list or a dict?
DYNACONF_A_LIST="[1, 2, 3, 4]"
DYNACONF_A_DICT="{key='value'}"

# Nested keys can be set using `__` double underscores
# you can also use a lazy `@format` to interpolate values
# `this` is bound to the `settings` instance.
DYNACONF_DB__SERVER = "@format {this[name]}.com"

# You can also perform calculations or complex loops here using Jinja
# NOTE: beware, computations on Jinja can bring overhead to the settings load
DYNACONF_DURATION = "@jinja {{24 * 60 * 31 }}"

# Jinja also has `this` bound to `settings` and `env` bound to os.environ
# remember the `DYNACONF_A_LIST` we exported above? lets double it.
DYNACONF_DOUBLES_LIST = "@jinja [{% for n in this.a_list %} {{n * 2 }} {% endfor %}]"

# NOW go and read the `main.py` file
